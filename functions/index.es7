const morgan = require('morgan');
const fetch = require('node-fetch');
const app = require('express')();
const FormData = require('form-data');

const bodyParser = require('body-parser');

app.use(morgan('combined'));
if (process.argv[2] === 'dev') {
  app.use(bodyParser.urlencoded({ extended: false }));
}

const SLACK_TOKEN = 'ZmAUnPLxNnfSdH0OlSp6wFnr';
const AIRTABLE_API_KEY = 'keyr23yt6W4vwV4zc';
const SLACK_INCOMING_HOOK =
  'https://hooks.slack.com/services/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';
const SLACK_APP_TOKEN =
  'xoxp-2171822291-11431073668-260975407857-c8d63e4f45eb3787f574d1cdc891d905';

const postToSlack = async foods => {
  await fetch(SLACK_INCOMING_HOOK, {
    method: 'POST',
    body: JSON.stringify({
      text:
        '<!channel> Hi mọi người, thức ăn xế hôm nay có những món sau đây. ' +
        'Mọi người nhanh tay submit đặt món nhé. :alarm_clock: Em chốt order ' +
        'lúc *11:20am* hen! Sau giờ này, đường link sẽ bị disabled, các bạn ' +
        'sẽ không đặt thêm được nữa nên mọi người tranh thủ nha :smile: ' +
        'Thanks.',
      attachments: foods
        .map(({ fields, id }) => ({
          text: '*' + fields['Tên món'] + ' (Mã số `' + fields['ID'] + '`)*',
          fallback: 'Bạn không thể đặt món',
          callback_id: 'order_food_' + id,
          attachment_type: 'default',
          image_url: fields['Hình ảnh']
            ? (fields['Hình ảnh'].filter(
                ({ type }) => type === 'image/jpeg',
              )[0] || {}).url || ''
            : '',
          actions: [
            {
              name: 'order_food_' + id,
              text: 'Đặt món',
              type: 'select',
              options: [
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                9,
                10,
                11,
                12,
                13,
                14,
                15,
                16,
                17,
                18,
                19,
                20,
              ].map(i => ({
                text: 'Đặt ' + i + ' phần',
                value: i,
              })),
            },
          ],
        }))
        .concat([
          {
            text:
              '*Đặt giùm* hoặc *đặt nhiều phần*, mọi người vào link này ' +
              'nha: http://bit.ly/air-lounge-order-form :grin:',
          },
        ]),
    }),
  });
  return 'Đã đăng menu lên channel :)';
};

const checkMenu = async () => {
  const todayFood = await fetch(
    'https://api.airtable.com/v0/appkhdzUXxa4FWcih/Menu?' +
      ('api_key=' + AIRTABLE_API_KEY + '&filterByFormula={Món hôm nay}'),
  ).then(r => r.json());

  return await postToSlack(todayFood.records);
};

const selectUserFullName = async (params, listStaff) => {
  const action = params.actions.length ? params.actions[0] : null;
  const foodCount = action.selected_options[0].value;
  // Open dialog
  const form = new FormData();
  form.append('token', SLACK_APP_TOKEN);
  form.append(
    'dialog',
    JSON.stringify({
      callback_id: 'set_up_username',
      title: 'Đặt món lần đầu',
      elements: [
        {
          label: 'Chọn tên của bạn',
          placeholder: '(Chỉ cần cài đặt trong lần đặt món đầu tiên)',
          type: 'select',
          name: 'airtable_staff_id',
          value: '',
          options: listStaff.records.map(staff => ({
            label: staff.fields['Họ tên'],
            value: staff.id,
          })),
        },
        {
          label: 'Số lượng',
          type: 'text',
          name: 'food_count',
          value: foodCount,
        },
      ],
    }),
  );
  form.append('trigger_id', params.trigger_id);
  const response = await fetch('https://slack.com/api/dialog.open', {
    method: 'post',
    body: form,
  }).then(r => r.json());
  console.log('Send dialog:', response);
  return '';
};

const createOrder = async (airTableStaffId, foodCount) => {
  console.log('createOrder', airTableStaffId, foodCount);
  return ''; // Return empty string to keep the original msg
};

const setUpUsernameAndOrder = async params => {
  if (!params.submission.airtable_staff_id) {
    return {
      errors: [
        {
          name: 'airtable_staff_id',
          error: 'Bạn cần phải chọn tên để đặt món!',
        },
      ],
    };
  }

  const airtableResponse = await fetch(
    'https://api.airtable.com/v0/appkhdzUXxa4FWcih/Staff/' +
      ('' + params.submission.airtable_staff_id),
    {
      method: 'patch',
      headers: {
        'Content-type': 'application/json',
        Authorization: 'Bearer ' + AIRTABLE_API_KEY,
      },

      body: JSON.stringify({
        fields: {
          'Slack User ID': params.user.id,
        },
      }),
    },
  ).then(r => r.json());

  return await createOrder(
    params.submission.airtable_staff_id,
    params.submission.food_count,
  );
};

const orderFood = async params => {
  const user = params.user;
  const action = params.actions.length ? params.actions[0] : null;
  const foodCount = action.selected_options[0].value;

  console.log('action', action);

  const listStaff = await fetch(
    'https://api.airtable.com/v0/appkhdzUXxa4FWcih/Staff' +
      ('?api_key=' + AIRTABLE_API_KEY),
  ).then(r => r.json());

  const airTableUser = listStaff.records.filter(
    staff => staff.fields['Slack User ID'] === user.id,
  )[0];

  if (!airTableUser) {
    return selectUserFullName(params, listStaff);
  }

  /* const orderList = await fetch( */
  /*   'https://api.airtable.com/v0/appkhdzUXxa4FWcih/Order?' + */
  /*     ('api_key=' + AIRTABLE_API_KEY + '&') + */
  /*     "filterByFormula=IS_SAME(CREATED_TIME(), TODAY(), 'day')", */
  /* ).then(r => r.json()); */
  /*  */
  /* console.log( */
  /*   'orderList', */
  /*   orderList.records.map(order => ({ */
  /*     staffId: order.fields['Tên nhân viên'], */
  /*     count: order.fields['Số phần ăn'], */
  /*   })), */
  /* ); */
  console.log('Done');

  return await createOrder(airTableUser.id, foodCount);
};

app.get('/', (req, res) => {
  res.send(`Go home, you are drunk`);
});

app.post('/test-post-to-slack', async (req, res) => {
  res.send(await checkMenu());
});

app.post('/order', async (req, res) => {
  const params = JSON.parse(req.body.payload);

  if (!params.token || params.token !== SLACK_TOKEN) {
    res.send('No.');
    return;
  }

  console.log('callback_id', params.callback_id);
  if (params.callback_id.indexOf('order_food_') === 0) {
    res.send(await orderFood(params));
  } else if (params.callback_id === 'set_up_username') {
    res.send(await setUpUsernameAndOrder(params));
  }
});

app.post('/list', async (req, res) => {
  if (!req.body.token || req.body.token !== SLACK_TOKEN) {
    res.send('No.');
    return;
  }
  res.send(await checkMenu());
});

app.get('/hello', async (req, res) => {
  res.send('hello from expressjs.');
});

if (process.argv[2] === 'dev') {
  app.listen(8010, function() {
    console.log('Example app listening on port 8010.');
  });
}
exports.doanxe = app;
